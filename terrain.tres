[gd_resource type="VisualShader" load_steps=15 format=2]

[ext_resource path="res://ProcedualTerrain/terrain textures/gangryusi_south_grass.png" type="Texture" id=1]
[ext_resource path="res://ProcedualTerrain/terrain textures/su_ghostcity_floor_d.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeTexture" id=7]
output_port_for_preview = 0
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=9]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=13]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeIf" id=14]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.7, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=15]
default_input_values = [ 0, 0.0, 1, 0.7 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 0.0, 1, 4.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "normal"

[sub_resource type="VisualShaderNodeVec3Constant" id=4]
constant = Vector3( 0, 1, 0 )

[sub_resource type="VisualShaderNodeDotProduct" id=5]

[sub_resource type="VisualShaderNodeIf" id=6]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.95, 2, 0.0, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=12]
operator = 1

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D tex_frg_15;
uniform sampler2D tex_frg_12;



void vertex() {
// Output:0

}

void fragment() {
// Input:8
	mat4 n_out8p0 = INV_CAMERA_MATRIX;

// Input:4
	vec3 n_out4p0 = NORMAL;

// TransformVectorMult:9
	vec3 n_out9p0 = (vec4(n_out4p0, 1.0) * n_out8p0).xyz;

// Vector:5
	vec3 n_out5p0 = vec3(0.000000, 1.000000, 0.000000);

// DotProduct:6
	float n_out6p0 = dot(n_out9p0, n_out5p0);

// Texture:15
	vec4 tex_frg_15_read = texture(tex_frg_15, UV.xy);
	vec3 n_out15p0 = tex_frg_15_read.rgb;
	float n_out15p1 = tex_frg_15_read.a;

// Texture:12
	vec4 tex_frg_12_read = texture(tex_frg_12, UV.xy);
	vec3 n_out12p0 = tex_frg_12_read.rgb;
	float n_out12p1 = tex_frg_12_read.a;

// ScalarOp:28
	float n_in28p1 = 0.70000;
	float n_out28p0 = n_out6p0 - n_in28p1;

// ScalarOp:33
	float n_in33p1 = 4.00000;
	float n_out33p0 = n_out28p0 * n_in33p1;

// VectorScalarMix:26
	vec3 n_out26p0 = mix(n_out12p0, n_out15p0, n_out33p0);

// If:27
	float n_in27p1 = 0.70000;
	float n_in27p2 = 0.00001;
	vec3 n_out27p0;
	if(abs(n_out6p0 - n_in27p1) < n_in27p2)
	{
		n_out27p0 = n_out26p0;
	}
	else if(n_out6p0 < n_in27p1)
	{
		n_out27p0 = n_out12p0;
	}
	else
	{
		n_out27p0 = n_out26p0;
	}

// If:7
	float n_in7p1 = 0.95000;
	float n_in7p2 = 0.00000;
	vec3 n_in7p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out7p0;
	if(abs(n_out6p0 - n_in7p1) < n_in7p2)
	{
		n_out7p0 = n_in7p3;
	}
	else if(n_out6p0 < n_in7p1)
	{
		n_out7p0 = n_out27p0;
	}
	else
	{
		n_out7p0 = n_out15p0;
	}

// Output:0
	ALBEDO = n_out7p0;
	EMISSION = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -269.682, 10.7785 )
nodes/fragment/0/position = Vector2( 1180, 260 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -520, -80 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -580, 20 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -100, 40 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 840, 280 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( -520, -180 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( -320, -100 )
nodes/fragment/12/node = SubResource( 7 )
nodes/fragment/12/position = Vector2( -280, 580 )
nodes/fragment/15/node = SubResource( 9 )
nodes/fragment/15/position = Vector2( -300, 220 )
nodes/fragment/26/node = SubResource( 13 )
nodes/fragment/26/position = Vector2( 360, 500 )
nodes/fragment/27/node = SubResource( 14 )
nodes/fragment/27/position = Vector2( 620, 520 )
nodes/fragment/28/node = SubResource( 15 )
nodes/fragment/28/position = Vector2( 40, 340 )
nodes/fragment/33/node = SubResource( 20 )
nodes/fragment/33/position = Vector2( 160, 440 )
nodes/fragment/connections = PoolIntArray( 6, 0, 7, 0, 4, 0, 9, 1, 8, 0, 9, 0, 15, 0, 7, 4, 27, 0, 7, 5, 6, 0, 27, 0, 6, 0, 28, 0, 28, 0, 33, 0, 6, 0, 7, 0, 4, 0, 9, 1, 8, 0, 9, 0, 15, 0, 7, 4, 27, 0, 7, 5, 6, 0, 27, 0, 6, 0, 28, 0, 28, 0, 33, 0, 7, 0, 0, 0, 6, 0, 7, 0, 4, 0, 9, 1, 8, 0, 9, 0, 15, 0, 7, 4, 27, 0, 7, 5, 6, 0, 27, 0, 6, 0, 28, 0, 28, 0, 33, 0, 7, 0, 0, 0, 9, 0, 6, 0, 5, 0, 6, 1, 12, 0, 26, 0, 15, 0, 26, 1, 33, 0, 26, 2, 26, 0, 27, 3, 26, 0, 27, 4, 12, 0, 27, 5, 7, 0, 0, 5 )
