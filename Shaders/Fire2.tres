[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[ext_resource path="res://Game/Shaders/Images/Noise_WB_03_a.png" type="Texture" id=1]
[ext_resource path="res://Game/Shaders/Images/Noise_sh_001.png" type="Texture" id=2]
[ext_resource path="res://Game/Shaders/Images/fire2.jpg" type="Texture" id=3]
[ext_resource path="res://Game/Shaders/Images/Wave_01.png" type="Texture" id=4]

[sub_resource type="Shader" id=7]
code = "shader_type spatial;

uniform sampler2D albedo_texture; // Black and white texture
uniform sampler2D NOISE_PATTERN;
uniform sampler2D TONE_MAPPING;
uniform sampler2D transparency_texture; // Texture for additional transparency control
uniform sampler2D displacement_texture; // Texture for vertex displacement

uniform vec2 scroll = vec2(0.5, 0.5);
uniform vec2 scroll2 = vec2(0.5, 0.5);
uniform vec2 noiseScale1 = vec2(1.0, 1.0);
uniform vec2 noiseScale2 = vec2(1.0, 1.0);
uniform float base_intensity: hint_range(0, 0.5) = 0.1;
uniform float transparency: hint_range(0, 1) = 0.5;
uniform vec4 emission_color: hint_color = vec4(1.0, 1.0, 1.0, 1.0); // Emission color and intensity
uniform float bend_amount: hint_range(0, 1) = 0.1; // Amount of mesh bending
uniform float displacement_amount: hint_range(0, 1) = 0.1; // Amount of vertex displacement

// Vertex shader
void vertex() {
    vec2 uv = UV + TIME * scroll; // Calculate scrolling UV coordinates
    uv = fract(uv); // Ensure UV coordinates are wrapped
    
    // Calculate bending offset based on the transparency texture
    float bend_value = texture(transparency_texture, uv).r;
    vec3 bend = vec3(0.0, bend_value * bend_amount, 0.0); // Apply bending along the Y axis

    // Calculate displacement based on the displacement texture
    float displacement_value = texture(displacement_texture, uv).r;
    vec3 displacement = vec3(0.0, displacement_value * displacement_amount, 0.0); // Displace along the Y axis

    // Apply bending and displacement
    VERTEX += bend; // Apply bending displacement
    VERTEX += displacement; // Apply displacement in Y direction
}

// Fragment shader
void fragment() {
    vec2 uv = UV + TIME * scroll; // Calculate scrolling UV coordinates
    uv = fract(uv); // Ensure UV coordinates are wrapped

    // Sample the black and white texture
    float tex_value = texture(albedo_texture, uv).r;

    // Calculate pattern intensities
    float pattern_intensity = texture(NOISE_PATTERN, uv * noiseScale1 + TIME * scroll).r;
    float pattern_intensity2 = texture(NOISE_PATTERN, uv * noiseScale2 + TIME * scroll2).r;
    float intensity = tex_value * pattern_intensity * pattern_intensity2 + base_intensity;

    // Sample the tone mapping texture based on calculated intensity
    vec4 tone_color = texture(TONE_MAPPING, vec2(intensity, 0.5));

    // Sample the transparency texture
    float additional_transparency = texture(transparency_texture, uv).r;

    // Set the final color, alpha, and emission
    ALBEDO = tone_color.rgb;  // Set the color
    ALPHA = tex_value * transparency * additional_transparency; // Apply additional transparency
    EMISSION = emission_color.rgb * tex_value; // Apply emission color and intensity
}
"

[sub_resource type="Gradient" id=8]
offsets = PoolRealArray( 0.0496894, 0.136646, 0.310559, 0.515528, 0.689441, 0.745342, 0.900621 )
colors = PoolColorArray( 0.787879, 0.101056, 0.0170735, 0.97461, 1, 0.128264, 0.0216702, 0.967774, 1, 0.583162, 0.0135951, 0.783048, 1, 0.0916069, 0.0223209, 0.979053, 1, 0.64213, 0.0125483, 0.759102, 1, 0.0235294, 0.0235294, 1, 1, 0.686275, 0.0117647, 0.741176 )

[sub_resource type="GradientTexture" id=9]
gradient = SubResource( 8 )
width = 1024

[resource]
render_priority = 2
shader = SubResource( 7 )
shader_param/scroll = Vector2( 0, 1 )
shader_param/scroll2 = Vector2( 0, 1 )
shader_param/noiseScale1 = Vector2( 1, 1 )
shader_param/noiseScale2 = Vector2( 1, 1 )
shader_param/base_intensity = 0.1
shader_param/transparency = 1.0
shader_param/emission_color = Color( 1, 1, 1, 1 )
shader_param/bend_amount = 1.0
shader_param/displacement_amount = 1.0
shader_param/albedo_texture = ExtResource( 1 )
shader_param/NOISE_PATTERN = ExtResource( 3 )
shader_param/TONE_MAPPING = SubResource( 9 )
shader_param/transparency_texture = ExtResource( 2 )
shader_param/displacement_texture = ExtResource( 4 )
